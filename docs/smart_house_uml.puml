@startuml SmartHouse_ClassDiagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 14
skinparam packageFontSize 12
skinparam dpi 150
skinparam linetype ortho
skinparam nodesep 30
skinparam ranksep 45
skinparam minClassWidth 140
skinparam maxClassWidth 350
skinparam wrapWidth 320

title "Система Умного Дома - Диаграмма Классов"

class SmartHome {
    - id_ : string
    - speakers_ : map<string, Speaker>
    --
    + SmartHome()
    + get_id() : size_t
    + add_speaker(name, room) : bool
    + move_speaker(name, new_room) : bool
    + rename_speaker(old_name, new_name) : bool
    + remove_speaker(name) : bool
    + size() : size_t
    + get_speakers() : const map<string, Speaker>&
    + to_string() : string
    + operator[](name : string) : Speaker&
    + operator[](name : string) : const Speaker&
    + operator<<(os, smart_home) : ostream&
    --
    - SmartHome(const SmartHome&) = delete
    - operator=(const SmartHome&) = delete
    - SmartHome(SmartHome&&) = delete
    - operator=(SmartHome&&) = delete
}

class Speaker {
    - name_ : string
    - devices_ : map<string, shared_ptr<Device>>
    - room_ : Room
    --
    + Speaker(speaker_name, room)
    + get_name() : const string&
    + add_device(device) : bool
    + remove_device(id) : bool
    + get_device(id) : shared_ptr<Device>
    + get_device(id) : const shared_ptr<Device>
    + get_all_devices() : const map<string, shared_ptr<Device>>&
    + check_and_activate_devices() : void
    + get_room_type() : RoomType
    + get_room() : const Room&
    + get_device_count() : size_t
    + move_to_room(new_room) : void
    + to_string() : string
    --
    - Speaker(Speaker&&) = default
    - operator=(Speaker&&) = default
    - rename(new_name) : bool
    - Speaker(const Speaker&) = delete
    - operator=(const Speaker&) = delete
}

struct "Speaker::Room" as Room {
    + name : string
    + room_number : int
    + room_type : RoomType
    --
    + Room(name, room_number, type)
    --
    + enum RoomType { LIVING_ROOM, CORRIDOR, RESTROOM, KITCHEN, BALCONY }
}

class Device {
    # id_ : const string
    # name_ : const string
    # status_ : DeviceStatus
    --
    + Device(name)
    + Device(other)
    + ~Device()
    + get_id() : const string&
    + get_name() : const string&
    + get_status() : DeviceStatus
    + set_status(status) : void
    + clone() : shared_ptr<Device>
    --
    + enum DeviceStatus { ONLINE, OFFLINE }
    - operator=(const Device&) = delete
    + Device(Device&&) noexcept
    + operator=(Device&&) noexcept
}

abstract class Object {
    --
    + ~Object()
    + {abstract} [[nodiscard]] to_string() const : string
    --
    # Object()
}

enum TemperatureUnit {
    CELSIUS
    FAHRENHEIT
    KELVIN
}

class TemperatureManager {
    - temperature_unit_ : TemperatureUnit
    --
    + TemperatureManager(unit = CELSIUS)
    + set_unit(unit) : void
    + get_unit() : TemperatureUnit
    + get_unit_string() : string
    + convert_to_unit(value, from) : double
    + {static} unit_to_string(unit) : string
    + {static} convert(value, from, to) : double
}

interface IActivatable {
    + ~IActivatable()
    + {abstract} turn_on() : void
    + {abstract} turn_off() : void
    + {abstract} get_power_state() : PowerState
    --
    + enum PowerState { ON, OFF }
}

interface IMeasurable {
    + ~IMeasurable()
    + {abstract} read_value() : double
    + {abstract} get_unit() : const string&
    + {abstract} get_is_calibrated() : bool
    + {abstract} calibrate() : void
}

class VacuumCleaner {
    - power_state_ : PowerState
    - battery_level_ : int
    --
    + VacuumCleaner(name)
    + VacuumCleaner(VacuumCleaner&&) noexcept
    + operator=(VacuumCleaner&&) noexcept
    + clone() : shared_ptr<Device>
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + get_battery_level() : int
    + to_string() : string
}

class SmartLight {
    - power_state_ : PowerState
    - brightness_ : int
    --
    + SmartLight(name)
    + SmartLight(SmartLight&&) noexcept
    + operator=(SmartLight&&) noexcept
    + clone() : shared_ptr<Device>
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + set_brightness(level) : void
    + get_brightness() : int
    + to_string() : string
}

class Thermometer {
    - temperature_ : double
    - is_calibrated_ : bool
    - temp_manager_ : TemperatureManager
    --
    + Thermometer(name, unit = CELSIUS)
    + Thermometer(Thermometer&&) noexcept
    + operator=(Thermometer&&) noexcept
    + clone() : shared_ptr<Device>
    + read_value() : double
    + get_unit() : const string&
    + get_is_calibrated() : bool
    + calibrate() : void
    + to_string() : string
}

class SmartKettle {
    - mutable mutex_ : shared_mutex
    - power_state_ : atomic<PowerState>
    - temperature_ : atomic<double>
    - calibrated_ : atomic<bool>
    - target_temp_ : atomic<double>
    - temp_manager_ : TemperatureManager
    - mutable unit_string_cache_ : string
    --
    + SmartKettle(name, unit = CELSIUS)
    + SmartKettle(other)
    + SmartKettle(SmartKettle&&) noexcept
    + operator=(SmartKettle&&) noexcept
    + clone() : shared_ptr<Device>
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + read_value() : double
    + get_unit() : const string&
    + get_is_calibrated() : bool
    + calibrate() : void
    + set_target_temperature(temp) : void
    + set_temperature_unit(unit) : void
    + to_string() : string
    --
    # heat() : future<void>
}

' Оптимизированное размещение для заполнения A4
SmartHome -[hidden]right- Object
Object -[hidden]right- TemperatureManager
SmartHome -[hidden]down-> Speaker
Speaker -[hidden]right- Room
Object -[hidden]down-> Device
Device -[hidden]right- TemperatureManager
TemperatureManager -[hidden]down- TemperatureUnit
Device -[hidden]down-> IActivatable
IActivatable -[hidden]right- IMeasurable
VacuumCleaner -[hidden]right- SmartLight
Thermometer -[hidden]right- SmartKettle
IActivatable -[hidden]down-> VacuumCleaner
IMeasurable -[hidden]down-> Thermometer

' Композиция
SmartHome *-- Speaker : "содержит"
Speaker *-- Room

' Управление устройствами
Speaker --> Device : "управляет"

' Наследование
Object <|-- Device
Object <|-- SmartHome
Object <|-- Speaker
Object <|-- Room
Device <|-- VacuumCleaner
Device <|-- SmartLight
Device <|-- Thermometer
Device <|-- SmartKettle

' Реализация интерфейсов
IActivatable <|.. VacuumCleaner
IActivatable <|.. SmartLight
IMeasurable <|.. Thermometer
IActivatable <|.. SmartKettle
IMeasurable <|.. SmartKettle

' Композиция с TemperatureManager
TemperatureManager <--* Thermometer : "содержит"
TemperatureManager <--* SmartKettle : "содержит"

' Использование enum TemperatureUnit
TemperatureManager --> TemperatureUnit : "использует"

@enduml 