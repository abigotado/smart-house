@startuml SmartHouse_ClassDiagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 9
skinparam packageFontSize 11
skinparam dpi 150
skinparam linetype ortho
skinparam nodesep 10
skinparam ranksep 30

title "Система Умного Дома - Диаграмма Классов"

class SmartHome {
    - speakers : map<string, Speaker>
    --
    + add_speaker(name, room_type) : bool
    + remove_speaker(name) : bool
    + get_speaker(name) : Speaker*
    + get_speaker(name) : const Speaker*
    + get_all_speakers() : const map<string, Speaker>&
    + get_speaker_count() : size_t
    + activate_all_speakers() : void
    + to_string() : string
    + operator[](name) : Speaker&
    + operator[](name) : const Speaker&
    + operator<<(os, smart_home) : ostream&
}

class Speaker {
    - devices : map<string, shared_ptr<Device>>
    - room : Room
    --
    + Speaker(room_type)
    + add_device(device) : bool
    + remove_device(id) : bool
    + get_device(id) : shared_ptr<Device>
    + get_device(id) : const shared_ptr<Device>
    + get_all_devices() : const map<string, shared_ptr<Device>>&
    + activate_all_devices() : void
    + deactivate_all_devices() : void
    + get_room_type() : RoomType
    + get_device_count() : size_t
    + to_string() : string
}

class "Speaker::Room" as Room {
    - room_type : RoomType
    - area : double
    - description : string
    --
    + Room(type, area, desc)
    + get_room_type() : RoomType
    + get_area() : double
    + get_description() : const string&
    + set_description(desc) : void
    --
    + enum RoomType { LIVING_ROOM, BEDROOM, CHILDREN_ROOM, RESTROOM, KITCHEN, BALCONY }
}

abstract class Device {
    # id : const string
    # name : const string
    # status : DeviceStatus
    --
    + Device(id, name)
    + ~Device()
    + get_id() : const string&
    + get_name() : const string&
    + get_status() : DeviceStatus
    + set_status(status) : void
    + to_string() : string
    + {abstract} clone() : shared_ptr<Device>
    --
    + enum DeviceStatus { ONLINE, OFFLINE }
}

interface IActivatable {
    + ~IActivatable()
    + {abstract} turn_on() : void
    + {abstract} turn_off() : void
    + {abstract} get_power_state() : PowerState
    --
    + enum PowerState { ON, OFF }
}

interface IMeasurable {
    + ~IMeasurable()
    + {abstract} read_value() : double
    + {abstract} get_unit() : const string&
    + {abstract} is_calibrated() : bool
    + {abstract} calibrate() : void
}

class VacuumCleaner {
    - power_state : PowerState
    - battery_level : int
    --
    + VacuumCleaner(id, name)
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + get_battery_level() : int
    + clone() : shared_ptr<Device>
}

class SmartLight {
    - power_state : PowerState
    - brightness : int
    --
    + SmartLight(id, name)
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + set_brightness(level) : bool
    + get_brightness() : int
    + clone() : shared_ptr<Device>
}

class Thermometer {
    - temperature : double
    - calibrated : bool
    --
    + Thermometer(id, name)
    + read_value() : double
    + get_unit() : const string&
    + is_calibrated() : bool
    + calibrate() : void
    + clone() : shared_ptr<Device>
}

class SmartKettle {
    - power_state : PowerState
    - temperature : double
    - calibrated : bool
    - target_temp : double
    --
    + SmartKettle(id, name)
    + turn_on() : void
    + turn_off() : void
    + get_power_state() : PowerState
    + read_value() : double
    + get_unit() : const string&
    + is_calibrated() : bool
    + calibrate() : void
    + set_target_temperature(temp) : bool
    + clone() : shared_ptr<Device>
}

' Горизонтальное размещение интерфейсов
IActivatable -[hidden]right- IMeasurable

' Горизонтальное размещение устройств
VacuumCleaner -[hidden]right- SmartLight
Thermometer -[hidden]right- SmartKettle

' Вертикальная последовательность
SmartHome -[hidden]down-> Speaker
Speaker -[hidden]down-> Room
Room -[hidden]down-> Device
Device -[hidden]down-> IActivatable
IActivatable -[hidden]down-> VacuumCleaner

' Композиция
SmartHome *-- Speaker : "содержит"
Speaker *-- Room : "nested class"

' Управление устройствами
Speaker o-- Device : "управляет"

' Наследование
Device <|-- VacuumCleaner
Device <|-- SmartLight
Device <|-- Thermometer
Device <|-- SmartKettle

' Реализация интерфейсов
IActivatable <|.. VacuumCleaner
IActivatable <|.. SmartLight
IMeasurable <|.. Thermometer
IActivatable <|.. SmartKettle
IMeasurable <|.. SmartKettle

@enduml 