@startuml SmartHouse_ClassDiagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 9
skinparam packageFontSize 11
skinparam dpi 150
skinparam linetype ortho
skinparam nodesep 10
skinparam ranksep 30

title "Система Умного Дома - Диаграмма Классов"

class SmartHome {
    - speakers : map<string, Speaker>
    --
    + addSpeaker(name, roomType) : bool
    + removeSpeaker(name) : bool
    + getSpeaker(name) : Speaker*
    + getSpeaker(name) : const Speaker*
    + getAllSpeakers() : const map<string, Speaker>&
    + getSpeakerCount() : size_t
    + activateAllSpeakers() : void
    + toString() : string
    + operator[](name) : Speaker&
    + operator[](name) : const Speaker&
    + operator<<(os, smartHome) : ostream&
}

class Speaker {
    - devices : map<string, shared_ptr<Device>>
    - room : Room
    --
    + Speaker(roomType)
    + addDevice(device) : bool
    + removeDevice(id) : bool
    + getDevice(id) : shared_ptr<Device>
    + getDevice(id) : const shared_ptr<Device>
    + getAllDevices() : const map<string, shared_ptr<Device>>&
    + activateAllDevices() : void
    + deactivateAllDevices() : void
    + getRoomType() : RoomType
    + getDeviceCount() : size_t
    + toString() : string
}

class "Speaker::Room" as Room {
    - roomType : RoomType
    - area : double
    - description : string
    --
    + Room(type, area, desc)
    + getRoomType() : RoomType
    + getArea() : double
    + getDescription() : const string&
    + setDescription(desc) : void
    --
    + enum RoomType { LIVING_ROOM, BEDROOM, CHILDREN_ROOM, RESTROOM, KITCHEN, BALCONY }
}

abstract class Device {
    # id : const string
    # name : const string
    # status : Status
    --
    + Device(id, name)
    + getId() : const string&
    + getName() : const string&
    + getStatus() : Status
    + setStatus(status) : void
    + toString() : string
    + {abstract} clone() : unique_ptr<Device>
    --
    + enum Status { ONLINE, OFFLINE }
}

interface IActivatable {
    + {abstract} turnOn() : bool
    + {abstract} turnOff() : bool
    + {abstract} isOn() : bool
    --
    + enum PowerState { ON, OFF }
}

interface IMeasurable {
    + {abstract} readValue() : double
    + {abstract} getUnit() : const string&
    + {abstract} isCalibrated() : bool
    + {abstract} calibrate() : bool
}

class VacuumCleaner {
    - powerState : PowerState
    - batteryLevel : int
    --
    + VacuumCleaner(id, name)
    + turnOn() : bool
    + turnOff() : bool
    + isOn() : bool
    + getBatteryLevel() : int
    + clone() : unique_ptr<Device>
}

class SmartLight {
    - powerState : PowerState
    - brightness : int
    --
    + SmartLight(id, name)
    + turnOn() : bool
    + turnOff() : bool
    + isOn() : bool
    + setBrightness(level) : bool
    + getBrightness() : int
    + clone() : unique_ptr<Device>
}

class Thermometer {
    - temperature : double
    - calibrated : bool
    --
    + Thermometer(id, name)
    + readValue() : double
    + getUnit() : const string&
    + isCalibrated() : bool
    + calibrate() : bool
    + clone() : unique_ptr<Device>
}

class SmartKettle {
    - powerState : PowerState
    - temperature : double
    - calibrated : bool
    - targetTemp : double
    --
    + SmartKettle(id, name)
    + turnOn() : bool
    + turnOff() : bool
    + isOn() : bool
    + readValue() : double
    + getUnit() : const string&
    + isCalibrated() : bool
    + calibrate() : bool
    + setTargetTemperature(temp) : bool
    + clone() : unique_ptr<Device>
}

' Горизонтальное размещение интерфейсов
IActivatable -[hidden]right- IMeasurable

' Горизонтальное размещение устройств
VacuumCleaner -[hidden]right- SmartLight
Thermometer -[hidden]right- SmartKettle

' Вертикальная последовательность
SmartHome -[hidden]down-> Speaker
Speaker -[hidden]down-> Room
Room -[hidden]down-> Device
Device -[hidden]down-> IActivatable
IActivatable -[hidden]down-> VacuumCleaner

' Композиция
SmartHome *-- Speaker : "содержит"
Speaker *-- Room : "nested class"

' Управление устройствами
Speaker o-- Device : "управляет"

' Наследование
Device <|-- VacuumCleaner
Device <|-- SmartLight
Device <|-- Thermometer
Device <|-- SmartKettle

' Реализация интерфейсов
IActivatable <|.. VacuumCleaner
IActivatable <|.. SmartLight
IMeasurable <|.. Thermometer
IActivatable <|.. SmartKettle
IMeasurable <|.. SmartKettle

@enduml 